package by.epam.signsControl.bean;

import java.io.Serializable;
import java.util.ArrayList;


/**
 * bean for jdbc
 * <p>
 *
 * @author Bulgak Alexander
 * @see FactoryType
 * @see Serializable
 */
public class MapPoint implements FactoryType, Serializable, Cloneable {

    /**
     * generated by Intellij idea
     */
    private static final long serialVersionUID = -2559001946431331274L;

    /**
     * coordinates string from jdbc
     */
    private String coordinates;

    /**
     * array list of addresses from jdbc
     */
    private ArrayList<String> addresses = new ArrayList<>();

    /**
     * array list of signsLists id from jdbc
     */
    private ArrayList<Integer> signsLists = new ArrayList<>();

    /**
     * array list of directions from jdbc
     */
    private ArrayList<Character> angles = new ArrayList<>();

    /**
     * array list of annotations from jdbc
     */
    private ArrayList<String> annotations = new ArrayList<>();

    /**
     * empty constructor
     */
    public MapPoint() {
    }

    /**
     * constructor with all parameters
     *
     * @param coordinates {@link MapPoint#coordinates}
     * @param addresses   {@link MapPoint#addresses}
     * @param signsLists  {@link MapPoint#signsLists}
     * @param angles      {@link MapPoint#angles}
     * @param annotations {@link MapPoint#annotations}
     */
    public MapPoint(String coordinates, ArrayList<String> addresses, ArrayList<Integer> signsLists, ArrayList<Character> angles, ArrayList<String> annotations) {
        this.coordinates = coordinates;
        this.addresses = addresses;
        this.signsLists = signsLists;
        this.angles = angles;
        this.annotations = annotations;
    }

    /**
     * @return this class clone
     */
    @Override
    public Object clone() {
        try {
            MapPoint mapPoint = (MapPoint) super.clone();
            mapPoint.addresses = this.getAddresses();
            mapPoint.signsLists = this.getSignsLists();
            mapPoint.angles = this.getAngles();
            mapPoint.annotations = this.getAnnotations();
            return mapPoint;
        } catch (CloneNotSupportedException e) {
            // this shouldn't happen, since we are Cloneable
            throw new InternalError(e);
        }
    }

    /**
     * add parameter to   {@link MapPoint#addresses}
     *
     * @param address address to add
     */
    public void addAddress(String address) {
        this.addresses.add(address);
    }

    /**
     * add parameter to {@link MapPoint#signsLists}
     *
     * @param signsList sign list to add
     */
    public void addSignsList(int signsList) {
        this.signsLists.add(signsList);
    }

    /**
     * add parameter to {@link MapPoint#annotations}
     *
     * @param annotation to add
     */
    public void addAnnotation(String annotation) {
        this.annotations.add(annotation);
    }

    /**
     * add parameter to {@link MapPoint#angles}
     *
     * @param angle to add
     */
    public void addAngle(char angle) {
        this.angles.add(angle);
    }

    /**
     * @return {@link MapPoint#coordinates}
     */
    public String getCoordinates() {
        return coordinates;
    }

    /**
     * @param coordinates {@link MapPoint#coordinates}
     */
    public void setCoordinates(String coordinates) {
        this.coordinates = coordinates;
    }

    /**
     * @return {@link MapPoint#addresses} clone
     */
    public ArrayList<String> getAddresses() {
        return new ArrayList<String>(addresses);
    }

    /**
     * @param addresses {@link MapPoint#addresses}
     */
    public void setAddresses(ArrayList<String> addresses) {
        this.addresses = addresses;
    }

    /**
     * @return {@link MapPoint#signsLists} clone
     */
    public ArrayList<Integer> getSignsLists() {
        return new ArrayList<Integer>(signsLists);
    }

    /**
     * @param signsLists {@link MapPoint#signsLists}
     */
    public void setSignsLists(ArrayList<Integer> signsLists) {
        this.signsLists = signsLists;
    }

    /**
     * @return {@link MapPoint#annotations} clone
     */
    public ArrayList<String> getAnnotations() {
        return new ArrayList<String>(annotations);
    }

    /**
     * @param annotations {@link MapPoint#annotations}
     */
    public void setAnnotations(ArrayList<String> annotations) {
        this.annotations = annotations;
    }

    /**
     * @return {@link MapPoint#angles} clone
     */
    public ArrayList<Character> getAngles() {

        return new ArrayList<Character>(angles);
    }

    /**
     * @param angles {@link MapPoint#angles}
     */
    public void setAngles(ArrayList<Character> angles) {
        this.angles = angles;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        MapPoint mapPoint = (MapPoint) o;

        if (coordinates != null ? !coordinates.equals(mapPoint.coordinates) : mapPoint.coordinates != null)
            return false;
        if (addresses != null ? !addresses.equals(mapPoint.addresses) : mapPoint.addresses != null) return false;
        if (signsLists != null ? !signsLists.equals(mapPoint.signsLists) : mapPoint.signsLists != null) return false;
        if (angles != null ? !angles.equals(mapPoint.angles) : mapPoint.angles != null) return false;
        return annotations != null ? annotations.equals(mapPoint.annotations) : mapPoint.annotations == null;
    }

    @Override
    public int hashCode() {
        int result = coordinates != null ? coordinates.hashCode() : 0;
        result = 31 * result + (addresses != null ? addresses.hashCode() : 0);
        result = 31 * result + (signsLists != null ? signsLists.hashCode() : 0);
        result = 31 * result + (angles != null ? angles.hashCode() : 0);
        result = 31 * result + (annotations != null ? annotations.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("MapPoint{");
        sb.append("coordinates='").append(coordinates).append('\'');
        sb.append(", addresses=").append(addresses);
        sb.append(", signsLists=").append(signsLists);
        sb.append(", angles=").append(angles);
        sb.append(", annotations=").append(annotations);
        sb.append('}');
        return sb.toString();
    }
}
