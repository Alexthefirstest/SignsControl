package by.epam.signsControl.bean;

import java.io.Serializable;
import java.util.ArrayList;

/**
 * bean include {@link MapPoint} and list of {@link LocalSign} arrays
 *
 * @author Bulgak Alexander
 * @see FactoryType
 * @see Serializable
 * @see LocalSign
 * @see MapPoint
 */

public class MapPoint$LocalSign implements Serializable, FactoryType, Cloneable {

    /**
     * generated by IDEA
     */
    private static final long serialVersionUID = -8012668349900341256L;

    /**
     * {@link MapPoint}
     */
    private MapPoint mapPoint;

    /**
     * list of list of {@link LocalSign}
     */
    private ArrayList<ArrayList<LocalSign>> listOfLocalSignsArrays;

    /**
     * empty constructor
     */
    public MapPoint$LocalSign() {
        listOfLocalSignsArrays = new ArrayList<>();
    }

    /**
     * constructor
     *
     * @param mapPoint               {@link MapPoint$LocalSign#mapPoint}
     * @param listOfLocalSignsArrays {@link MapPoint$LocalSign#listOfLocalSignsArrays}
     */
    public MapPoint$LocalSign(MapPoint mapPoint, ArrayList<ArrayList<LocalSign>> listOfLocalSignsArrays) {
        this.mapPoint = mapPoint;
        this.listOfLocalSignsArrays = listOfLocalSignsArrays;
    }

    /**
     * @return this object clone
     */
    @Override
    protected Object clone() {
        return new MapPoint$LocalSign((this.mapPoint == null ? null : (MapPoint) this.mapPoint.clone()),
                (this.listOfLocalSignsArrays == null ? null : (ArrayList<ArrayList<LocalSign>>) this.listOfLocalSignsArrays.clone()));
    }

    /**
     * @return {@link MapPoint$LocalSign#mapPoint} clone
     */
    public MapPoint getMapPoint() {
        return (this.mapPoint == null ? null : (MapPoint) this.mapPoint.clone());
    }

    /**
     * @param mapPoint {@link MapPoint$LocalSign#mapPoint}
     */
    public void setMapPoint(MapPoint mapPoint) {
        this.mapPoint = mapPoint;
    }

    /**
     * @return {@link MapPoint$LocalSign#listOfLocalSignsArrays} clone
     */
    public ArrayList<ArrayList<LocalSign>> getListOfLocalSignsArrays() {
        return (this.listOfLocalSignsArrays == null ? null : (ArrayList<ArrayList<LocalSign>>) this.listOfLocalSignsArrays.clone());
    }

    /**
     * @param arrPosition position of {@link LocalSign} array
     * @return array fo {@link LocalSign} clone
     */
    public ArrayList<LocalSign> getLocalSignsArrays(int arrPosition) {
        return (listOfLocalSignsArrays.get(arrPosition) == null ? null : (ArrayList<LocalSign>) (listOfLocalSignsArrays.get(arrPosition)).clone());
    }

    /**
     * @param localSignPosition {@link LocalSign} position to return from
     * @return {@link LocalSign} from last arr on param position
     */
    public LocalSign getLocalSignFromLastArr(int localSignPosition) {
        return (listOfLocalSignsArrays.get(listOfLocalSignsArrays.size() - 1)).get(localSignPosition);
    }

    /**
     * @param listOfLocalSignsArrays set {@link MapPoint$LocalSign#listOfLocalSignsArrays}
     */
    public void setListOfLocalSignsArrays(ArrayList<ArrayList<LocalSign>> listOfLocalSignsArrays) {
        this.listOfLocalSignsArrays = listOfLocalSignsArrays;
    }

    /**
     * add new {@link LocalSign} {@link MapPoint$LocalSign#listOfLocalSignsArrays} to the tail
     */
    public void addLocalSignArr() {
        listOfLocalSignsArrays.add(new ArrayList<LocalSign>());
    }


    /**
     * add localSign param to last tail of last arr in {@link MapPoint$LocalSign#listOfLocalSignsArrays}
     *
     * @param localSign {@link LocalSign}
     * @throws IndexOutOfBoundsException if {{@link MapPoint$LocalSign#listOfLocalSignsArrays}} is null
     */
    public void addLocalSignToLastArr(LocalSign localSign) {
        listOfLocalSignsArrays.get(listOfLocalSignsArrays.size() - 1).add(localSign);
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        MapPoint$LocalSign that = (MapPoint$LocalSign) o;

        if (mapPoint != null ? !mapPoint.equals(that.mapPoint) : that.mapPoint != null) return false;
        return listOfLocalSignsArrays != null ? listOfLocalSignsArrays.equals(that.listOfLocalSignsArrays) : that.listOfLocalSignsArrays == null;
    }

    @Override
    public int hashCode() {
        int result = mapPoint != null ? mapPoint.hashCode() : 0;
        result = 31 * result + (listOfLocalSignsArrays != null ? listOfLocalSignsArrays.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("MapPoint$LocalSign{");
        sb.append("mapPoint={").append(mapPoint);
        sb.append("}, listOfLocalSignsArrays={").append(listOfLocalSignsArrays);
        sb.append("} }");
        return sb.toString();
    }
}


